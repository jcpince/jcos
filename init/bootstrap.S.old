.code32
.section .bootstrap

#include "asm_defs.h"

/* Multiboot2 header */
MULTIBOOT2_HEADER:
    .align 4
    .long MB2_HDR_MAGIC
    .long MB2_ARCH
    .long MB2_HEADERLEN
    .long MB2_CHECKSUM
    .long 0
    .long 0

/* Stack buffer */
.comm stack, STACKSIZE, 32                  /* reserve 16k stack on a quadword boundary */

/* 32-bit entry point */
.globl loader32
loader32:
#if (EARLYDBG == 1)
1:  jmp 1b
#endif

    mov $(stack_phys + STACKSIZE), %esp     /* set up the stack on top of the buffer reserved for it */
    push  %eax                              /* Multiboot magic number */
    push  %ebx                              /* Multiboot data structure address */

#if (EARLYDBG == 2)
1:  jmp 1b
#endif

    call asm_check_cpuid
    jc cpuid_not_supported

    call asm_check_longmode
    jc lm_not_supported

    /* Will never return from long mode */
    jmp activate_long_mode

    /* But just in case... */
    jmp lm_not_supported

asm_check_cpuid:
    pushf                                   /* push the EFLAGS in the stack */
    pop %eax                                /* Get the EFLAGS into eax */
    mov %eax, %ecx                          /* Backup original EFLAGS into ecx */
    xor $(1 << EFLAGS_IDBIT), %eax          /* Invert the bit ID in EFLAGS */
    push %eax
    popf                                    /* Restaure the new EFLAGS */

    pushf
    pop %eax
    xor %ecx, %eax                          /* Verify that ID-bit changed */
    shr $EFLAGS_IDBIT, %eax                 /* Shift the ID-bit so it becomes the bit 0 */
    and $1, %eax                            /* Check if the bit 0 is set */
    push %ecx                               /* restaure original EFLAGS */
    popf

    test %eax, %eax                        /* test the bit 0 */
    je .bad_cpu
    ret
.bad_cpu:
    stc
    ret

asm_check_longmode:
    /* Call CPUID so that we check that the PROCINFO function is supported by CPUID */
    mov $CPUID_HIGHESTFUNC, %eax
    cpuid

    /* Compare the highest function with PROCINFO */
    cmp $CPUID_PROCINFO, %eax
    jb .no_procinf

    /* Call CPUID with PROCINFO */
    mov $CPUID_PROCINFO, %eax
    cpuid
    test $(1 << CPUID_PROCINFO_LM_BIT), %edx
    jz .no_lm
    ret
.no_lm:
.no_procinf:
    stc
    ret

cpuid_not_supported:
    jmp cpuid_not_supported

lm_not_supported:
    jmp lm_not_supported

activate_long_mode:
    /* 32-bit to 64-bit code */
    /* 1. Have paging disabled */
    mov %cr0, %eax                          /* Deactivate long mode */
    and $0x7fffffff, %eax                   /* by disabling paging. */
    mov %eax, %cr0

    /* Put EDI on the buffer reserved for PML4/PDP/PD and PT */
    mov $(phys_pml4_start), %edi
    /* Since we are doing a rep stosl, count should be bytes/4 */
    push %edi                               /* REP STOSD alters EDI */
    mov $(4*KB), %ecx
    xor %eax, %eax
    rep stosl                               /* clear the PML4 */
    pop %edi                                /* Get EDI back with the address of PML4 */

#if (EARLYDBG == 3)
1:	jmp 1b
#endif

    /* 3. Load CR3 with the physical address of the PML4 */
    mov %edi, %cr3                          /* Point CR3 at the PML4. */

    /* Build Page Map Level 4 */
    /* Mapping of the linear addresses 0 -> 0x0 to the physical memory */
    lea PML4_TABLE_SIZE(%edi), %eax         /* Put the address of the Page Directory Pointer Table in to EAX */
    or $(PAGE_PRESENT | PAGE_WRITE), %eax   /* Or EAX with the flags - present flag, writable flag */
    mov %eax, %es:(%edi)                    /* Store the value of EAX as the first PML4 entry */
    mov %eax, (0x1FF*8)(%edi)               /* Set the same ptr for the addresses 0xFFFFFFFF80100000 */

    /* Build the Page Directory Pointer */
    lea 0x2000(%edi), %eax		/* Put the address of the Page Directory in to EAX */
    or $(PAGE_PRESENT | PAGE_WRITE), %eax	/* Or EAX with the flags - present flag, writable flag */
    mov %eax, %es:0x1000(%edi)		/* Store the value of EAX as the first PDPT entry */
    mov %eax, (0x1FE*8+0x1000)(%edi)	/* Set the same ptr for the addresses 0xFFFFFFFF80100000 */
    mov %eax, (0x2*8+0x1000)(%edi)		/* Set the same ptr for the addresses 0x0000000080100000 */

    /* Build the Page Directory */
    lea 0x3000(%edi), %eax		/* Put the address of the Page Table in to EAX */
    or $(PAGE_PRESENT | PAGE_WRITE), %eax	/* Or EAX with the flags - present flag, writable flag */
    mov %eax, %es:0x2000(%edi)		/* Store the value of EAX as the first PD entry */
    mov %eax, (0x8*8+0x2000)(%edi)		/* Set the same ptr for the addresses 0x0000000001100000 */
    lea 0x4000(%edi), %eax		/* Put the address of the Page Table in to EAX */
    or $(PAGE_PRESENT | PAGE_WRITE), %eax	/* Or EAX with the flags - present flag, writable flag */
    mov %eax, %es:0x2008(%edi)		/* Store the value of EAX as the first PD entry */
    mov %eax, (0x8*8+0x2008)(%edi)		/* Set the same ptr for the addresses 0x0000000001100000 */
    lea 0x5000(%edi), %eax		/* Put the address of the Page Table in to EAX */
    or $(PAGE_PRESENT | PAGE_WRITE), %eax	/* Or EAX with the flags - present flag, writable flag */
    mov %eax, %es:0x2010(%edi)		/* Store the value of EAX as the first PD entry */
    mov %eax, (0x8*8+0x2010)(%edi)		/* Set the same ptr for the addresses 0x0000000001100000 */

#if (EARLYDBG == 4)
1:	jmp 1b
#endif

	/* Build the page table */
	push %edi				/* Save EDI so we can set CR3 later on */
	lea 0x3000(%edi), %edi			/* Point EDI to the page table */
	mov $(PAGE_PRESENT | PAGE_WRITE), %eax	/* Move the flags into EAX - and point it to 0x0000 */
1:	mov %eax, %es:(%edi)
	add $(PAGESZ), %eax
	add $(8), %edi
	cmp $(2*MB), %eax
	jb 1b
	pop %edi				/* Restore EDI which contains PML4 base address */

	push %edi				/* Save EDI so we can set CR3 later on */
	lea 0x4000(%edi), %edi			/* Point EDI to the page table */
	mov $(0x200000 | PAGE_PRESENT | PAGE_WRITE), %eax	/* Move the flags into EAX - and point it to 0x200000 */
1:	mov %eax, %es:(%edi)
	add $(PAGESZ), %eax
	add $(8), %edi
	cmp $(4*MB), %eax
	jb 1b
	pop %edi				/* Restore EDI which contains PML4 base address */

	push %edi				/* Save EDI so we can set CR3 later on */
	lea 0x5000(%edi), %edi			/* Point EDI to the page table */
	mov $(0x400000 | PAGE_PRESENT | PAGE_WRITE), %eax	/* Move the flags into EAX - and point it to 0x200000 */
1:	mov %eax, %es:(%edi)
	add $(PAGESZ), %eax
	add $(8), %edi
	cmp $(6*MB), %eax
	jb 1b
	pop %edi				/* Restore EDI which contains PML4 base address */

#if 1 // (EARLYDBG == 5)
1:	jmp 1b
#endif

	/* Disable PIC 16 interrupts */
	mov $0xff, %al
	out %al, $0xA1
	mov $0xff, %al
	out %al, $0x21

	/* 2. Set the PAE enable bit in CR4					*/
	/* Enter long mode. */
	mov %cr4, %eax
	or $0xA0, %eax			/* Set the PAE and PGE bits.*/
	mov %eax, %cr4

	/* 4. Enable long mode by setting the EFER.LME flag in MSR 0xC0000080	*/
	mov $0xC0000080, %ecx
	rdmsr
	or $0x00000100, %eax
	wrmsr				/* Set the LME bit */

	/* 5. Enable paging							*/
	mov %cr0, %eax			/* Activate long mode */
	or $0x80000000, %eax		/* by enabling paging */
	mov %eax, %cr0

	/* Jump to 64-bits mode with a long jump (or lret) */
	lgdt GDT.Pointer
	ljmpl $0x0008, $LongMode

.align 4
GDT:
GDT.NULL:
	.quad 0x0
GDT.64bits.kcode:
	.quad 0x00AF9A000000FFFF
GDT.64bits.kdata:
	.quad 0x00CF92000000FFFF
GDT.64bits.kstack:
	.quad 0x00CF92000000FFFF
GDT.64bits.ucode:
	.quad 0x00CFFA000000FFFF
GDT.64bits.udata:
	.quad 0x00CFF2000000FFFF
.align 4
	.word 0
GDT.Pointer:
	.word GDT.Pointer - GDT - 1	/* lenght on 16 bits */
	.quad GDT			/* pointer to the data on 64 bits */

.code64
.align 4
LongMode:
    /* We are now in LongMode,
      we can setup the segments and call the
      kernel main */
    mov $0x0010, %ax
    mov %ax, %ds
    mov %ax, %es
    mov %ax, %fs
    mov %ax, %gs
    mov $0x0018, %ax
    mov %ax, %ss

    /* callq map_virtual_memory64 */

    /* jmp and not push so that the stack is not modified */
    movabsq $kernel_start64, %rax
    jmp *%rax

    /* Should never arrive here but just in case */
    cli
hang:
    hlt					# halt machine should kernel return
    jmp   hang

#if 0
map_virtual_memory64:
1:	jmp 1b
	mov $(phys_pml4_start), %rdi
	/* Build Page Map Level 4 for the virtual memory used by our kernel */
	/*
		PML4+0x1000: Physical PDPT
		PML4+0x2000: Physical PDT
		PML4+0x3000: Physical PT


		PML4+0x6000: Virtual PDPT
		PML4+0x7000: Virtual PDT
		PML4+0x8000: Virtual PT
	*/
	/* Mapping of the linear addresses 0x8000000000 -> 0x0000FFFFFFFFFFFF(most significant
	bit propagated so virtually 0xFFFFFFFFFFFFFFFF) to the physical memory */
    	lea 0x6000(%rdi), %rax		/* Put the address of the Page Directory Pointer Table in to EAX */
    	or $(PAGE_PRESENT | PAGE_WRITE), %rax	/* Or EAX with the flags - present flag, writable flag */
    	movabsq $(fake_KERNEL_VIRT_ADDR), %rbx
    	shr $(PML4_BIT0_OFF), %rbx
    	and $(PML4_MASK), %rbx
	add %rbx, %rdi
    	mov %rax, (%rdi)			/* Store the value of EAX as the first PML4 entry */
	sub %rbx, %rdi

	/* Build the Page Directory Pointer */
    	lea 0x2000(%rdi), %rax		/* Put the address of the Page Directory in to EAX */
    	or $(PAGE_PRESENT | PAGE_WRITE), %rax	/* Or EAX with the flags - present flag, writable flag */
    	movabsq $(fake_KERNEL_VIRT_ADDR), %rbx
    	shr $(PDPT_BIT0_OFF), %rbx
    	and $(PDPT_MASK), %rbx
	add %rbx, %rdi
	add $0x6000, %rdi
    	mov %rax, (%rdi)			/* Store the value of EAX as the first PML4 entry */
	retq
#endif
